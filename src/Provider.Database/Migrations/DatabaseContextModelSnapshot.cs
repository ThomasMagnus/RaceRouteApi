// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Provider.Database.Context;

#nullable disable

namespace Provider.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Provider.Database.Models.DbAggregatesPoints", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PointId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PointId");

                    b.HasIndex("TrackId");

                    b.ToTable("AggregatesPoints", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("824fad52-e913-4240-a1a8-fa88ba564f8f"),
                            PointId = new Guid("dbf48ff1-831d-4421-b356-fb4a430809de"),
                            TrackId = new Guid("4c82ce6f-bd07-4f5d-9cdc-a8e3e44cea57")
                        },
                        new
                        {
                            Id = new Guid("08ac37a8-86b7-46be-96bf-10099c300f36"),
                            PointId = new Guid("8dc3a5e0-67fc-4f3d-af32-101ce83f75e0"),
                            TrackId = new Guid("4c82ce6f-bd07-4f5d-9cdc-a8e3e44cea57")
                        },
                        new
                        {
                            Id = new Guid("eb1949ba-097f-4e61-8728-435713d50ca4"),
                            PointId = new Guid("24a1084a-b81e-4285-802a-9241c8a8cd7d"),
                            TrackId = new Guid("cfa042c8-6ecc-43d3-bc43-b962fe23b2ff")
                        },
                        new
                        {
                            Id = new Guid("e23f2f69-dcfb-4601-b62e-b0ff925f4e3b"),
                            PointId = new Guid("f307c645-9f56-4d1a-aac0-3f2a94fe02ca"),
                            TrackId = new Guid("b5ee126c-cc87-4a57-ae34-d2859d300452")
                        },
                        new
                        {
                            Id = new Guid("2bab4f81-04bd-43cc-9d65-de432c51c6d4"),
                            PointId = new Guid("57e1853f-48f6-413e-9d6a-4a8f323bad0f"),
                            TrackId = new Guid("fbeb73bc-03fd-4fd6-9791-da5068791d1f")
                        },
                        new
                        {
                            Id = new Guid("9d2fbd52-fde2-4b9b-9f0f-7f6da41f3a94"),
                            PointId = new Guid("41737d8b-3ff7-4b41-aac6-70c1e6c44897"),
                            TrackId = new Guid("d46960ad-70c4-418a-b366-64954356bdc1")
                        });
                });

            modelBuilder.Entity("Provider.Database.Models.DbPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Points", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("24a1084a-b81e-4285-802a-9241c8a8cd7d"),
                            Height = 134.0,
                            Name = "Point3"
                        },
                        new
                        {
                            Id = new Guid("41737d8b-3ff7-4b41-aac6-70c1e6c44897"),
                            Height = 170.0,
                            Name = "Point6"
                        },
                        new
                        {
                            Id = new Guid("57e1853f-48f6-413e-9d6a-4a8f323bad0f"),
                            Height = 124.0,
                            Name = "Point5"
                        },
                        new
                        {
                            Id = new Guid("8dc3a5e0-67fc-4f3d-af32-101ce83f75e0"),
                            Height = 157.0,
                            Name = "Point2"
                        },
                        new
                        {
                            Id = new Guid("dbf48ff1-831d-4421-b356-fb4a430809de"),
                            Height = 145.0,
                            Name = "Point1"
                        },
                        new
                        {
                            Id = new Guid("f307c645-9f56-4d1a-aac0-3f2a94fe02ca"),
                            Height = 206.0,
                            Name = "Point4"
                        });
                });

            modelBuilder.Entity("Provider.Database.Models.DbTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid");

                    b.Property<string>("MaxSpeed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid");

                    b.Property<string>("Surface")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SecondId");

                    b.HasIndex("FirstId", "SecondId");

                    b.ToTable("Tracks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0fd3b73e-7259-43b5-a971-2835767dbae4"),
                            Distance = 0.0,
                            FirstId = new Guid("dbf48ff1-831d-4421-b356-fb4a430809de"),
                            MaxSpeed = "SLOW",
                            SecondId = new Guid("dbf48ff1-831d-4421-b356-fb4a430809de"),
                            Surface = "SAND"
                        },
                        new
                        {
                            Id = new Guid("4c82ce6f-bd07-4f5d-9cdc-a8e3e44cea57"),
                            Distance = 2314.0,
                            FirstId = new Guid("dbf48ff1-831d-4421-b356-fb4a430809de"),
                            MaxSpeed = "SLOW",
                            SecondId = new Guid("8dc3a5e0-67fc-4f3d-af32-101ce83f75e0"),
                            Surface = "SAND"
                        },
                        new
                        {
                            Id = new Guid("b5ee126c-cc87-4a57-ae34-d2859d300452"),
                            Distance = 3472.0,
                            FirstId = new Guid("24a1084a-b81e-4285-802a-9241c8a8cd7d"),
                            MaxSpeed = "FAST",
                            SecondId = new Guid("f307c645-9f56-4d1a-aac0-3f2a94fe02ca"),
                            Surface = "ASPHALT"
                        },
                        new
                        {
                            Id = new Guid("cfa042c8-6ecc-43d3-bc43-b962fe23b2ff"),
                            Distance = 4598.0,
                            FirstId = new Guid("8dc3a5e0-67fc-4f3d-af32-101ce83f75e0"),
                            MaxSpeed = "SLOW",
                            SecondId = new Guid("24a1084a-b81e-4285-802a-9241c8a8cd7d"),
                            Surface = "SAND"
                        },
                        new
                        {
                            Id = new Guid("d46960ad-70c4-418a-b366-64954356bdc1"),
                            Distance = 5927.0,
                            FirstId = new Guid("57e1853f-48f6-413e-9d6a-4a8f323bad0f"),
                            MaxSpeed = "FAST",
                            SecondId = new Guid("41737d8b-3ff7-4b41-aac6-70c1e6c44897"),
                            Surface = "ASPHALT"
                        },
                        new
                        {
                            Id = new Guid("fbeb73bc-03fd-4fd6-9791-da5068791d1f"),
                            Distance = 6672.0,
                            FirstId = new Guid("f307c645-9f56-4d1a-aac0-3f2a94fe02ca"),
                            MaxSpeed = "NORMAL",
                            SecondId = new Guid("57e1853f-48f6-413e-9d6a-4a8f323bad0f"),
                            Surface = "GROUND"
                        });
                });

            modelBuilder.Entity("Provider.Database.Models.DbAggregatesPoints", b =>
                {
                    b.HasOne("Provider.Database.Models.DbPoint", "Point")
                        .WithMany()
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Provider.Database.Models.DbTrack", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Point");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Provider.Database.Models.DbTrack", b =>
                {
                    b.HasOne("Provider.Database.Models.DbPoint", "FirstPoint")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Provider.Database.Models.DbPoint", "SecondPoint")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstPoint");

                    b.Navigation("SecondPoint");
                });
#pragma warning restore 612, 618
        }
    }
}
